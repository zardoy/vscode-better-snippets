// GENERATED. DON'T EDIT MANUALLY
// md5hash: bb84da0218a799a53646ef718a7e3b10
{
    "type": "object",
    "properties": {
        "enableBuiltinSnippets": {
            "description": "Include builtin JS/MD snippets",
            "default": true,
            "type": "boolean"
        },
        "useParamMode": {
            "description": "Choose the output for useSnippet type:\n```ts\n// generic\nconst params = useParams<'groupId'>()\n// cast\nconst params = useParams() as { groupId: string }\n```\n[see issue for more](https://github.com/remix-run/react-router/issues/8498)",
            "default": "cast",
            "enum": [
                "cast",
                "generic"
            ],
            "type": "string"
        },
        "enableExperimentalSnippets": {
            "description": "Whether to enable builtin postfix snippets. They may be moved to another extension in future releases",
            "default": false,
            "type": "boolean"
        },
        "customSnippets": {
            "suggestSortText": "betterSnippets.1",
            "type": "array",
            "items": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "when": {
                                "suggestSortText": "3",
                                "type": "object",
                                "properties": {
                                    "lineHasRegex": {
                                        "description": "Shouldn't be used with `Start` location as snippet would be hidden in that case",
                                        "type": "string"
                                    },
                                    "lineRegex": {
                                        "description": "Same as `lineHasRegex`, but the line will be tested from first character till current cursor position",
                                        "type": "string"
                                    },
                                    "languages": {
                                        "description": "Language identifier. Family name from `languageSupersets` can be used instead (e.g. js or react)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "locations": {
                                        "description": "Specify to restrict showing suggest in specific location",
                                        "type": "array",
                                        "items": {
                                            "enum": [
                                                "code",
                                                "comment",
                                                "fileStart",
                                                "lineStart",
                                                "topLineStart"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "pathRegex": {
                                        "type": "string"
                                    },
                                    "fileType": {
                                        "description": "Shortcuts for complex path regexs. If specified, `pathRegex` is ignored",
                                        "enum": [
                                            "package.json",
                                            "tsconfig.json"
                                        ],
                                        "type": "string"
                                    },
                                    "otherLines": {
                                        "type": "array",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "testRegex": {
                                                                    "description": "Tests against original string (with whitespaces)",
                                                                    "suggestSortText": "4",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "testRegex"
                                                            ]
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "line": {
                                                                    "description": "Which line to pick (relative to current)",
                                                                    "suggestSortText": "1",
                                                                    "type": "number"
                                                                },
                                                                "displayIfNoLine": {
                                                                    "default": false,
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "line"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "testRegex": {
                                                                    "description": "Tests against original string (with whitespaces)",
                                                                    "suggestSortText": "4",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "testRegex"
                                                            ]
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "indent": {
                                                                    "description": "How many levels up of indendation to look? By default 0 - any. Example: `-1`\nCurrently it is possible to lookup only above (negative number)",
                                                                    "suggestSortText": "2",
                                                                    "default": 0,
                                                                    "anyOf": [
                                                                        {
                                                                            "enum": [
                                                                                "up"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        {
                                                                            "type": "number"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            "required": [
                                                                "indent"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "testString": {
                                                                    "description": "Tests against trimmed string",
                                                                    "suggestSortText": "3",
                                                                    "type": "string"
                                                                },
                                                                "matchWith": {
                                                                    "default": "startsWith",
                                                                    "enum": [
                                                                        "endsWith",
                                                                        "includes",
                                                                        "startsWith"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "testString"
                                                            ]
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "line": {
                                                                    "description": "Which line to pick (relative to current)",
                                                                    "suggestSortText": "1",
                                                                    "type": "number"
                                                                },
                                                                "displayIfNoLine": {
                                                                    "default": false,
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "line"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "testString": {
                                                                    "description": "Tests against trimmed string",
                                                                    "suggestSortText": "3",
                                                                    "type": "string"
                                                                },
                                                                "matchWith": {
                                                                    "default": "startsWith",
                                                                    "enum": [
                                                                        "endsWith",
                                                                        "includes",
                                                                        "startsWith"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "testString"
                                                            ]
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "indent": {
                                                                    "description": "How many levels up of indendation to look? By default 0 - any. Example: `-1`\nCurrently it is possible to lookup only above (negative number)",
                                                                    "suggestSortText": "2",
                                                                    "default": 0,
                                                                    "anyOf": [
                                                                        {
                                                                            "enum": [
                                                                                "up"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        {
                                                                            "type": "number"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            "required": [
                                                                "indent"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "resolveImports": {
                                "description": "For JS langs only. How to resolve suggested imports if any",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                        "package": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "executeCommand": {
                                "description": "Execute custom command on snippet accept, doesn't work with resolveImports",
                                "defaultSnippets": [
                                    {
                                        "body": "$1"
                                    }
                                ],
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "command": {
                                                "type": "string"
                                            },
                                            "arguments": {
                                                "type": "array",
                                                "items": {}
                                            }
                                        },
                                        "required": [
                                            "arguments",
                                            "command"
                                        ]
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "body": {
                                "suggestSortText": "2",
                                "defaultSnippets": [
                                    {
                                        "body": "$1"
                                    }
                                ],
                                "anyOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "name": {
                                "suggestSortText": "!",
                                "type": "string"
                            },
                            "description": {
                                "description": "Should be short. Always displayed in completion widget on the same raw as label.",
                                "type": "string"
                            },
                            "when": {
                                "type": "object",
                                "properties": {
                                    "triggerCharacters": {
                                        "description": "The snippet will be visible only after typing specific character on the keyboard\nAdd '' (empty string) so it'll be visible after regular triggering or typing",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "group": {
                                "type": "string"
                            },
                            "fileIcon": {
                                "description": "If specified, `iconType` is ignored. It makes sense to use with custom file icon theme",
                                "type": "string"
                            },
                            "folderIcon": {
                                "description": "If specified, `iconType` and `fileIcon` is ignored. It makes sense to use with custom file icon theme",
                                "type": "string"
                            },
                            "sortText": {
                                "type": "string"
                            },
                            "iconType": {
                                "anyOf": [
                                    {
                                        "enum": [
                                            "Class",
                                            "Color",
                                            "Constant",
                                            "Constructor",
                                            "Enum",
                                            "EnumMember",
                                            "Event",
                                            "Field",
                                            "File",
                                            "Folder",
                                            "Function",
                                            "Interface",
                                            "Issue",
                                            "Keyword",
                                            "Method",
                                            "Module",
                                            "Operator",
                                            "Property",
                                            "Reference",
                                            "Snippet",
                                            "Struct",
                                            "Text",
                                            "TypeParameter",
                                            "Unit",
                                            "User",
                                            "Value",
                                            "Variable"
                                        ],
                                        "type": "string"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ]
                            },
                            "replaceTriggerCharacter": {
                                "description": "Only if `when.triggerCharacters` is used",
                                "default": false,
                                "type": "boolean"
                            },
                            "type": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "body",
                            "name"
                        ]
                    }
                ]
            }
        },
        "typingSnippets": {
            "suggestSortText": "betterSnippets.2",
            "type": "array",
            "items": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "when": {
                                "suggestSortText": "3",
                                "type": "object",
                                "properties": {
                                    "lineHasRegex": {
                                        "description": "Shouldn't be used with `Start` location as snippet would be hidden in that case",
                                        "type": "string"
                                    },
                                    "lineRegex": {
                                        "description": "Same as `lineHasRegex`, but the line will be tested from first character till current cursor position",
                                        "type": "string"
                                    },
                                    "languages": {
                                        "description": "Language identifier. Family name from `languageSupersets` can be used instead (e.g. js or react)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "locations": {
                                        "description": "Specify to restrict showing suggest in specific location",
                                        "type": "array",
                                        "items": {
                                            "enum": [
                                                "code",
                                                "comment",
                                                "fileStart",
                                                "lineStart",
                                                "topLineStart"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "pathRegex": {
                                        "type": "string"
                                    },
                                    "fileType": {
                                        "description": "Shortcuts for complex path regexs. If specified, `pathRegex` is ignored",
                                        "enum": [
                                            "package.json",
                                            "tsconfig.json"
                                        ],
                                        "type": "string"
                                    },
                                    "otherLines": {
                                        "type": "array",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "testRegex": {
                                                                    "description": "Tests against original string (with whitespaces)",
                                                                    "suggestSortText": "4",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "testRegex"
                                                            ]
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "line": {
                                                                    "description": "Which line to pick (relative to current)",
                                                                    "suggestSortText": "1",
                                                                    "type": "number"
                                                                },
                                                                "displayIfNoLine": {
                                                                    "default": false,
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "line"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "testRegex": {
                                                                    "description": "Tests against original string (with whitespaces)",
                                                                    "suggestSortText": "4",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "testRegex"
                                                            ]
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "indent": {
                                                                    "description": "How many levels up of indendation to look? By default 0 - any. Example: `-1`\nCurrently it is possible to lookup only above (negative number)",
                                                                    "suggestSortText": "2",
                                                                    "default": 0,
                                                                    "anyOf": [
                                                                        {
                                                                            "enum": [
                                                                                "up"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        {
                                                                            "type": "number"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            "required": [
                                                                "indent"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "testString": {
                                                                    "description": "Tests against trimmed string",
                                                                    "suggestSortText": "3",
                                                                    "type": "string"
                                                                },
                                                                "matchWith": {
                                                                    "default": "startsWith",
                                                                    "enum": [
                                                                        "endsWith",
                                                                        "includes",
                                                                        "startsWith"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "testString"
                                                            ]
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "line": {
                                                                    "description": "Which line to pick (relative to current)",
                                                                    "suggestSortText": "1",
                                                                    "type": "number"
                                                                },
                                                                "displayIfNoLine": {
                                                                    "default": false,
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "line"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "testString": {
                                                                    "description": "Tests against trimmed string",
                                                                    "suggestSortText": "3",
                                                                    "type": "string"
                                                                },
                                                                "matchWith": {
                                                                    "default": "startsWith",
                                                                    "enum": [
                                                                        "endsWith",
                                                                        "includes",
                                                                        "startsWith"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "testString"
                                                            ]
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "indent": {
                                                                    "description": "How many levels up of indendation to look? By default 0 - any. Example: `-1`\nCurrently it is possible to lookup only above (negative number)",
                                                                    "suggestSortText": "2",
                                                                    "default": 0,
                                                                    "anyOf": [
                                                                        {
                                                                            "enum": [
                                                                                "up"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        {
                                                                            "type": "number"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            "required": [
                                                                "indent"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "resolveImports": {
                                "description": "For JS langs only. How to resolve suggested imports if any",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                        "package": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "executeCommand": {
                                "description": "Execute custom command on snippet accept, doesn't work with resolveImports",
                                "defaultSnippets": [
                                    {
                                        "body": "$1"
                                    }
                                ],
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "command": {
                                                "type": "string"
                                            },
                                            "arguments": {
                                                "type": "array",
                                                "items": {}
                                            }
                                        },
                                        "required": [
                                            "arguments",
                                            "command"
                                        ]
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "body": {
                                "description": "If `false` sequence will not be removed, useful for just executing post actions such as commands",
                                "suggestSortText": "2",
                                "defaultSnippets": [
                                    {
                                        "body": "$1"
                                    }
                                ],
                                "anyOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    {
                                        "enum": [
                                            false
                                        ],
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "sequence": {
                                "description": "Snippet will be accepted only after typing THE EXACT sequence of characters on the keyboard. Using arrows or mouse for navigating will reset the sequence (see settings)",
                                "suggestSortText": "!",
                                "type": "string"
                            },
                            "when": {
                                "type": "object",
                                "properties": {
                                    "lineBeforeRegex": {
                                        "description": "Recommnded instead of `lineRegex`, tests against what is before current snippet in the line\nExample:\n| - cursor, [...] - check position\nFor regular snippet `test` end position is before current word:\n`[before] test|`, `[before] beforetest|`,\nTyping snippet: cb\n`[before]cb|`, `[before ]cb|`,",
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "required": [
                            "body",
                            "sequence"
                        ]
                    }
                ]
            }
        },
        "typingSnippetsUndoStops": {
            "default": true,
            "type": "boolean"
        },
        "typingSnippetsEnableMulticursor": {
            "description": "Note that, currently regex are executed against first position only for now!",
            "default": true,
            "type": "boolean"
        },
        "snippetCreator.showSnippetAfterCreation": {
            "description": "Reveal snippet in settings.json after its creation",
            "default": true,
            "type": "boolean"
        },
        "customSnippetDefaults": {
            "description": "Override default values for every snippet",
            "type": "object",
            "properties": {
                "sortText": {
                    "type": "string"
                },
                "iconType": {
                    "anyOf": [
                        {
                            "enum": [
                                "Class",
                                "Color",
                                "Constant",
                                "Constructor",
                                "Enum",
                                "EnumMember",
                                "Event",
                                "Field",
                                "File",
                                "Folder",
                                "Function",
                                "Interface",
                                "Issue",
                                "Keyword",
                                "Method",
                                "Module",
                                "Operator",
                                "Property",
                                "Reference",
                                "Snippet",
                                "Struct",
                                "Text",
                                "TypeParameter",
                                "Unit",
                                "User",
                                "Value",
                                "Variable"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "type": {
                    "type": "string"
                },
                "description": {
                    "description": "Should be short. Always displayed in completion widget on the same raw as label. Default is 'Better Snippet'",
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "when": {
                    "type": "object",
                    "properties": {
                        "languages": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "locations": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "code",
                                    "comment",
                                    "fileStart",
                                    "lineStart",
                                    "topLineStart"
                                ],
                                "type": "string"
                            }
                        },
                        "pathRegex": {
                            "description": "Restrict suggesting all snippets (instead of overriding, regexs will be merged)",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "diagnosticTimeout": {
            "description": "(advanced) After which milliseconds stop observing on diagnostics to resovle snippet's `resolveImports`",
            "default": 1500,
            "type": "number"
        },
        "languageSupersets": {
            "description": "Define/change family of languages. You can use family's name instead of language id in when.",
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "typescriptLocations": {
            "type": "object",
            "additionalProperties": {
                "type": "object",
                "properties": {
                    "mode": {
                        "enum": [
                            "exclude",
                            "include"
                        ],
                        "type": "string"
                    },
                    "kinds": {
                        "description": "In which enable/disable tokens (final)",
                        "enum": [
                            "AbstractKeyword",
                            "AmpersandAmpersandEqualsToken",
                            "AmpersandAmpersandToken",
                            "AmpersandEqualsToken",
                            "AmpersandToken",
                            "AnyKeyword",
                            "ArrayBindingPattern",
                            "ArrayLiteralExpression",
                            "ArrayType",
                            "ArrowFunction",
                            "AsExpression",
                            "AsKeyword",
                            "AssertClause",
                            "AssertEntry",
                            "AssertKeyword",
                            "AssertsKeyword",
                            "AsteriskAsteriskEqualsToken",
                            "AsteriskAsteriskToken",
                            "AsteriskEqualsToken",
                            "AsteriskToken",
                            "AsyncKeyword",
                            "AtToken",
                            "AwaitExpression",
                            "AwaitKeyword",
                            "BacktickToken",
                            "BarBarEqualsToken",
                            "BarBarToken",
                            "BarEqualsToken",
                            "BarToken",
                            "BigIntKeyword",
                            "BigIntLiteral",
                            "BinaryExpression",
                            "BindingElement",
                            "Block",
                            "BooleanKeyword",
                            "BreakKeyword",
                            "BreakStatement",
                            "Bundle",
                            "CallExpression",
                            "CallSignature",
                            "CaretEqualsToken",
                            "CaretToken",
                            "CaseBlock",
                            "CaseClause",
                            "CaseKeyword",
                            "CatchClause",
                            "CatchKeyword",
                            "ClassDeclaration",
                            "ClassExpression",
                            "ClassKeyword",
                            "ClassStaticBlockDeclaration",
                            "CloseBraceToken",
                            "CloseBracketToken",
                            "CloseParenToken",
                            "ColonToken",
                            "CommaListExpression",
                            "CommaToken",
                            "ComputedPropertyName",
                            "ConditionalExpression",
                            "ConditionalType",
                            "ConflictMarkerTrivia",
                            "ConstKeyword",
                            "ConstructSignature",
                            "Constructor",
                            "ConstructorKeyword",
                            "ConstructorType",
                            "ContinueKeyword",
                            "ContinueStatement",
                            "Count",
                            "DebuggerKeyword",
                            "DebuggerStatement",
                            "DeclareKeyword",
                            "Decorator",
                            "DefaultClause",
                            "DefaultKeyword",
                            "DeleteExpression",
                            "DeleteKeyword",
                            "DoKeyword",
                            "DoStatement",
                            "DotDotDotToken",
                            "DotToken",
                            "ElementAccessExpression",
                            "ElseKeyword",
                            "EmptyStatement",
                            "EndOfDeclarationMarker",
                            "EndOfFileToken",
                            "EnumDeclaration",
                            "EnumKeyword",
                            "EnumMember",
                            "EqualsEqualsEqualsToken",
                            "EqualsEqualsToken",
                            "EqualsGreaterThanToken",
                            "EqualsToken",
                            "ExclamationEqualsEqualsToken",
                            "ExclamationEqualsToken",
                            "ExclamationToken",
                            "ExportAssignment",
                            "ExportDeclaration",
                            "ExportKeyword",
                            "ExportSpecifier",
                            "ExpressionStatement",
                            "ExpressionWithTypeArguments",
                            "ExtendsKeyword",
                            "ExternalModuleReference",
                            "FalseKeyword",
                            "FinallyKeyword",
                            "FirstAssignment",
                            "FirstBinaryOperator",
                            "FirstCompoundAssignment",
                            "FirstFutureReservedWord",
                            "FirstJSDocNode",
                            "FirstJSDocTagNode",
                            "FirstKeyword",
                            "FirstLiteralToken",
                            "FirstNode",
                            "FirstPunctuation",
                            "FirstReservedWord",
                            "FirstStatement",
                            "FirstTemplateToken",
                            "FirstToken",
                            "FirstTriviaToken",
                            "FirstTypeNode",
                            "ForInStatement",
                            "ForKeyword",
                            "ForOfStatement",
                            "ForStatement",
                            "FromKeyword",
                            "FunctionDeclaration",
                            "FunctionExpression",
                            "FunctionKeyword",
                            "FunctionType",
                            "GetAccessor",
                            "GetKeyword",
                            "GlobalKeyword",
                            "GreaterThanEqualsToken",
                            "GreaterThanGreaterThanEqualsToken",
                            "GreaterThanGreaterThanGreaterThanEqualsToken",
                            "GreaterThanGreaterThanGreaterThanToken",
                            "GreaterThanGreaterThanToken",
                            "GreaterThanToken",
                            "HashToken",
                            "HeritageClause",
                            "Identifier",
                            "IfKeyword",
                            "IfStatement",
                            "ImplementsKeyword",
                            "ImportClause",
                            "ImportDeclaration",
                            "ImportEqualsDeclaration",
                            "ImportKeyword",
                            "ImportSpecifier",
                            "ImportType",
                            "InKeyword",
                            "IndexSignature",
                            "IndexedAccessType",
                            "InferKeyword",
                            "InferType",
                            "InputFiles",
                            "InstanceOfKeyword",
                            "InterfaceDeclaration",
                            "InterfaceKeyword",
                            "IntersectionType",
                            "IntrinsicKeyword",
                            "IsKeyword",
                            "JSDocAllType",
                            "JSDocAugmentsTag",
                            "JSDocAuthorTag",
                            "JSDocCallbackTag",
                            "JSDocClassTag",
                            "JSDocComment",
                            "JSDocDeprecatedTag",
                            "JSDocEnumTag",
                            "JSDocFunctionType",
                            "JSDocImplementsTag",
                            "JSDocLink",
                            "JSDocLinkCode",
                            "JSDocLinkPlain",
                            "JSDocMemberName",
                            "JSDocNameReference",
                            "JSDocNamepathType",
                            "JSDocNonNullableType",
                            "JSDocNullableType",
                            "JSDocOptionalType",
                            "JSDocOverrideTag",
                            "JSDocParameterTag",
                            "JSDocPrivateTag",
                            "JSDocPropertyTag",
                            "JSDocProtectedTag",
                            "JSDocPublicTag",
                            "JSDocReadonlyTag",
                            "JSDocReturnTag",
                            "JSDocSeeTag",
                            "JSDocSignature",
                            "JSDocTag",
                            "JSDocTemplateTag",
                            "JSDocText",
                            "JSDocThisTag",
                            "JSDocTypeExpression",
                            "JSDocTypeLiteral",
                            "JSDocTypeTag",
                            "JSDocTypedefTag",
                            "JSDocUnknownType",
                            "JSDocVariadicType",
                            "JsxAttribute",
                            "JsxAttributes",
                            "JsxClosingElement",
                            "JsxClosingFragment",
                            "JsxElement",
                            "JsxExpression",
                            "JsxFragment",
                            "JsxOpeningElement",
                            "JsxOpeningFragment",
                            "JsxSelfClosingElement",
                            "JsxSpreadAttribute",
                            "JsxText",
                            "JsxTextAllWhiteSpaces",
                            "KeyOfKeyword",
                            "LabeledStatement",
                            "LastAssignment",
                            "LastBinaryOperator",
                            "LastCompoundAssignment",
                            "LastFutureReservedWord",
                            "LastJSDocNode",
                            "LastJSDocTagNode",
                            "LastKeyword",
                            "LastLiteralToken",
                            "LastPunctuation",
                            "LastReservedWord",
                            "LastStatement",
                            "LastTemplateToken",
                            "LastToken",
                            "LastTriviaToken",
                            "LastTypeNode",
                            "LessThanEqualsToken",
                            "LessThanLessThanEqualsToken",
                            "LessThanLessThanToken",
                            "LessThanSlashToken",
                            "LessThanToken",
                            "LetKeyword",
                            "LiteralType",
                            "MappedType",
                            "MergeDeclarationMarker",
                            "MetaProperty",
                            "MethodDeclaration",
                            "MethodSignature",
                            "MinusEqualsToken",
                            "MinusMinusToken",
                            "MinusToken",
                            "MissingDeclaration",
                            "ModuleBlock",
                            "ModuleDeclaration",
                            "ModuleKeyword",
                            "MultiLineCommentTrivia",
                            "NamedExports",
                            "NamedImports",
                            "NamedTupleMember",
                            "NamespaceExport",
                            "NamespaceExportDeclaration",
                            "NamespaceImport",
                            "NamespaceKeyword",
                            "NeverKeyword",
                            "NewExpression",
                            "NewKeyword",
                            "NewLineTrivia",
                            "NoSubstitutionTemplateLiteral",
                            "NonNullExpression",
                            "NotEmittedStatement",
                            "NullKeyword",
                            "NumberKeyword",
                            "NumericLiteral",
                            "ObjectBindingPattern",
                            "ObjectKeyword",
                            "ObjectLiteralExpression",
                            "OfKeyword",
                            "OmittedExpression",
                            "OpenBraceToken",
                            "OpenBracketToken",
                            "OpenParenToken",
                            "OptionalType",
                            "OverrideKeyword",
                            "PackageKeyword",
                            "Parameter",
                            "ParenthesizedExpression",
                            "ParenthesizedType",
                            "PartiallyEmittedExpression",
                            "PercentEqualsToken",
                            "PercentToken",
                            "PlusEqualsToken",
                            "PlusPlusToken",
                            "PlusToken",
                            "PostfixUnaryExpression",
                            "PrefixUnaryExpression",
                            "PrivateIdentifier",
                            "PrivateKeyword",
                            "PropertyAccessExpression",
                            "PropertyAssignment",
                            "PropertyDeclaration",
                            "PropertySignature",
                            "ProtectedKeyword",
                            "PublicKeyword",
                            "QualifiedName",
                            "QuestionDotToken",
                            "QuestionQuestionEqualsToken",
                            "QuestionQuestionToken",
                            "QuestionToken",
                            "ReadonlyKeyword",
                            "RegularExpressionLiteral",
                            "RequireKeyword",
                            "RestType",
                            "ReturnKeyword",
                            "ReturnStatement",
                            "SemicolonClassElement",
                            "SemicolonToken",
                            "SetAccessor",
                            "SetKeyword",
                            "ShebangTrivia",
                            "ShorthandPropertyAssignment",
                            "SingleLineCommentTrivia",
                            "SlashEqualsToken",
                            "SlashToken",
                            "SourceFile",
                            "SpreadAssignment",
                            "SpreadElement",
                            "StaticKeyword",
                            "StringKeyword",
                            "StringLiteral",
                            "SuperKeyword",
                            "SwitchKeyword",
                            "SwitchStatement",
                            "SymbolKeyword",
                            "SyntaxList",
                            "SyntheticExpression",
                            "SyntheticReferenceExpression",
                            "TaggedTemplateExpression",
                            "TemplateExpression",
                            "TemplateHead",
                            "TemplateLiteralType",
                            "TemplateLiteralTypeSpan",
                            "TemplateMiddle",
                            "TemplateSpan",
                            "TemplateTail",
                            "ThisKeyword",
                            "ThisType",
                            "ThrowKeyword",
                            "ThrowStatement",
                            "TildeToken",
                            "TrueKeyword",
                            "TryKeyword",
                            "TryStatement",
                            "TupleType",
                            "TypeAliasDeclaration",
                            "TypeAssertionExpression",
                            "TypeKeyword",
                            "TypeLiteral",
                            "TypeOfExpression",
                            "TypeOfKeyword",
                            "TypeOperator",
                            "TypeParameter",
                            "TypePredicate",
                            "TypeQuery",
                            "TypeReference",
                            "UndefinedKeyword",
                            "UnionType",
                            "UniqueKeyword",
                            "Unknown",
                            "UnknownKeyword",
                            "UnparsedInternalText",
                            "UnparsedPrepend",
                            "UnparsedPrologue",
                            "UnparsedSource",
                            "UnparsedSyntheticReference",
                            "UnparsedText",
                            "VarKeyword",
                            "VariableDeclaration",
                            "VariableDeclarationList",
                            "VariableStatement",
                            "VoidExpression",
                            "VoidKeyword",
                            "WhileKeyword",
                            "WhileStatement",
                            "WhitespaceTrivia",
                            "WithKeyword",
                            "WithStatement",
                            "YieldExpression",
                            "YieldKeyword"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "kinds",
                    "mode"
                ]
            }
        },
        "experimental.disableBuiltinSnippets": {
            "description": "Experimental way to disable builtin snippets. Will be removed in future in favor of something else.",
            "uniqueItems": true,
            "type": "array",
            "items": {
                "enum": [
                    "codeblock",
                    "dropdown",
                    "ed",
                    "ef",
                    "em",
                    "er",
                    "et",
                    "ts",
                    "tsx",
                    "useParam"
                ],
                "type": "string"
            }
        }
    },
    "required": [
        "customSnippetDefaults",
        "customSnippets",
        "diagnosticTimeout",
        "enableBuiltinSnippets",
        "enableExperimentalSnippets",
        "experimental.disableBuiltinSnippets",
        "languageSupersets",
        "snippetCreator.showSnippetAfterCreation",
        "typescriptLocations",
        "typingSnippets",
        "typingSnippetsEnableMulticursor",
        "typingSnippetsUndoStops",
        "useParamMode"
    ]
}